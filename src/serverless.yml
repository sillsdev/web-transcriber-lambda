custom:
    myStage: ${opt:stage, self:provider.stage}  #use the --stage CLI option if it exists, or use provider.stage
    isDebug: ${opt:debug, ""}
    stagedMessage:
        dev: "DEV"
        devx: "DEV"
        qa: "QA"
        prod: "PROD"
    userName: ${file(./serverless.env.yml):${self:custom.myStage}.MasterUsername}
    pwd: ${file(./serverless.env.yml):${self:custom.myStage}.MasterUserPassword}

service: transcriber_api

provider:
  name: aws
  runtime: dotnetcore2.1
  region: us-east-1
  stage: qa     #cli build params will override this!!
  profile: transcriber  #aws credentials file 
  stackName: TranscriberStack${self:custom.myStage}${self:custom.isDebug}
 # deploymentBucket:
 #   name: sil-transcriber-lead-api # Deployment bucket name. Default is generated by the framework
  environment:
    SIL_TR_CONNECTIONSTRING: ${file(./serverless.env.yml):${self:custom.myStage}.SIL_TR_CONNECTIONSTRING}
    SIL_TR_ORIGINSITES: ${file(./serverless.env.yml):${self:custom.myStage}.SIL_TR_ORIGINSITES}
    SIL_TR_AUTH0_DOMAIN: ${file(./serverless.env.yml):${self:custom.myStage}.SIL_TR_AUTH0_DOMAIN}
    SIL_TR_AUTH0_AUDIENCE: ${file(./serverless.env.yml):${self:custom.myStage}.SIL_TR_AUTH0_AUDIENCE}
    SIL_TR_AUTH0_TOKEN_ACCESS_CLIENT_ID: ${file(./serverless.env.yml):${self:custom.myStage}.SIL_TR_AUTH0_TOKEN_ACCESS_CLIENT_ID}
    SIL_TR_AUTH0_TOKEN_ACCESS_CLIENT_SECRET: ${file(./serverless.env.yml):${self:custom.myStage}.SIL_TR_AUTH0_TOKEN_ACCESS_CLIENT_SECRET}
    SIL_TR_USERFILES_BUCKET: ${file(./serverless.env.yml):${self:custom.myStage}.SIL_TR_USERFILES_BUCKET}
    SIL_TR_PARATEXT_CLIENT_ID:  ${file(./serverless.env.yml):${self:custom.myStage}.SIL_TR_PARATEXT_CLIENT_ID}
    SIL_TR_PARATEXT_CLIENT_SECRET:  ${file(./serverless.env.yml):${self:custom.myStage}.SIL_TR_PARATEXT_CLIENT_SECRET}
    SIL_TR_PARATEXT_AUTH0_CONNECTION:  ${file(./serverless.env.yml):${self:custom.myStage}.SIL_TR_PARATEXT_AUTH0_CONNECTION}
    SIL_TR_PARATEXT_DATA:   ${file(./serverless.env.yml):${self:custom.myStage}.SIL_TR_PARATEXT_DATA}
    SIL_TR_PARATEXT_REGISTRY:   ${file(./serverless.env.yml):${self:custom.myStage}.SIL_TR_PARATEXT_REGISTRY}
    SIL_TR_EMAIL_FROM:  ${file(./serverless.env.yml):${self:custom.myStage}.SIL_TR_EMAIL_FROM}
    SIL_TR_EMAIL_HOST:  ${file(./serverless.env.yml):${self:custom.myStage}.SIL_TR_EMAIL_HOST}
    SIL_TR_WEBHOOK_USERNAME:   ${file(./serverless.env.yml):${self:custom.myStage}.SIL_TR_WEBHOOK_USERNAME}
    SIL_TR_WEBHOOK_PASSWORD:   ${file(./serverless.env.yml):${self:custom.myStage}.SIL_TR_WEBHOOK_PASSWORD}
    ASPNETCORE_ENVIRONMENT: ${file(./serverless.env.yml):${self:custom.myStage}.ASPNETCORE_ENVIRONMENT}

deploymentPrefix: AWSTranscriberAPI/
package:
  artifact: bin/release/netcoreapp2.1/deploy-package_${self:custom.myStage}.zip

functions:
  api:
    handler: TranscriberApi::SIL.Transcriber.LambdaEntryPoint::FunctionHandlerAsync
    name: transcriber_api_${self:custom.myStage}${self:custom.isDebug}
    timeout: 30
    events:
       - http:
            path: /api/{proxy+}
            method: ANY
            cors:
             origin: '*'
             headers:
              - X-Fp
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent

# Create our resources with separate CloudFormation templates
resources:
  Conditions:
    IsProd: {"Fn::Equals" : ["${self:custom.myStage}", "prod"]}
    IsDevx: {"Fn::Equals" : ["${self:custom.myStage}", "devx"]}
    IsDev: {"Fn::Equals" : ["${self:custom.myStage}", "dev"]}
    IsQA:  {"Fn::Equals" : ["${self:custom.myStage}", "qa"]}
    #CreateResourcesOriginal: !Not [Condition: IsProd]
    CreateResources:  {"Fn::And": ["Fn::Equals" : ["${self:custom.myStage}", "qa"], "Fn::Equals" : ["${self:custom.isDebug}", ""]]}
  Resources:
## Create database - needs VPC with two subnets
   transcriberlambdavpc:
      Condition: CreateResources
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: "10.0.0.0/16"

   transcriberlambdasubnetA:
      Condition: CreateResources
      DependsOn: transcriberlambdavpc
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: transcriberlambdavpc
        AvailabilityZone: ${self:provider.region}a
        CidrBlock: "10.0.0.0/24"

   transcriberlambdasubnetB:
      Condition: CreateResources
      DependsOn: transcriberlambdavpc
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: transcriberlambdavpc
        AvailabilityZone: ${self:provider.region}b
        CidrBlock: "10.0.1.0/24"

   transcriberlambdasg:
      Condition: CreateResources
      DependsOn: transcriberlambdavpc
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for Serverless Functions
        VpcId:
          Ref: transcriberlambdavpc

   transcriberdatasg:
      Condition: CreateResources
      DependsOn: transcriberlambdavpc
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for RDS Instance
        VpcId:
          Ref: transcriberlambdavpc
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          SourceSecurityGroupId:
            Ref: transcriberlambdasg
        - IpProtocol: tcp
          FromPort: '11211'
          ToPort: '11211'
          SourceSecurityGroupId:
            Ref: transcriberlambdasg
        - IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          CidrIp: 0.0.0.0/0
          
   transcriberdatasubnet:
      Condition: CreateResources
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: "RDS Subnet Group"
        SubnetIds:
        - Ref: transcriberlambdasubnetA
        - Ref: transcriberlambdasubnetB
#Create the RDS Cluster and database -- naming it doesn't work so rename manually if desired
   transcriberrdscluster:
      Condition: CreateResources
      Type: AWS::RDS::DBInstance
      Properties:
        #DBClusterIdentifier: transdata${self:custom.myStage}
        Engine: Postgres
        DBName: transcriberdb
        MasterUsername: ${self:custom.userName}
        MasterUserPassword: ${self:custom.pwd}
        DBInstanceClass: db.t3.micro
        AllocatedStorage: 10
        VPCSecurityGroups:
        - "Fn::GetAtt": transcriberdatasg.GroupId
        DBSubnetGroupName:
          Ref: transcriberdatasubnet

# API Gateway Errors
#  - ${file(resources/api-gateway-errors.yml)}
   GatewayResponseDefault4XX:
     Type: 'AWS::ApiGateway::GatewayResponse'
     Properties:
       ResponseParameters:
         gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
         gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
       ResponseType: DEFAULT_4XX
       RestApiId:
         Ref: 'ApiGatewayRestApi'
   GatewayResponseDefault5XX:
     Type: 'AWS::ApiGateway::GatewayResponse'
     Properties:
       ResponseParameters:
         gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
         gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
       ResponseType: DEFAULT_5XX
       RestApiId:
         Ref: 'ApiGatewayRestApi'

##If the X-Fp header is not working (totally guessed on the cors stuff above)
##go to aws console, API Gateway, choose api
##Resources -> /{proxy} -> Actions Enable Cors
## Add X-Fp, to Access-Control-Allow-Headers
## Push "Enable cors and replace existing cors headers" button
##This doesn't work...so go create this s3 bucket manually
# Further instructions in file AWSConfig.txt

## Create S3 bucket for userfiles
##   transcribers3:
##    Type: AWS::S3::Bucket
##    Properties: 
##      BucketName: sil-transcriber-userfiles-${self:custom.myStage}
##    CORSConfiguration>: 
##        '<?xml version="1.0" encoding="UTF-8"?>
##        <CORSConfiguration xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
##        <CORSRule>
##            <AllowedOrigin>*</AllowedOrigin>
##            <AllowedMethod>GET</AllowedMethod>
##            <AllowedMethod>PUT</AllowedMethod>
##            <AllowedMethod>DELETE</AllowedMethod>
##            <AllowedHeader>*</AllowedHeader>
##        </CORSRule>
##        </CORSConfiguration>'